<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="true"
      throwConfigExceptions="true"
      internalLogLevel="Off" internalLogFile="E:\Self_Study\ZeroSoft\ZeroSoft\nlog-internal.log">
	<!--autoReload 自动重新加载
      throwExceptions 抛出异常
      throwConfigExceptions="true" NLog 在配置文件错误的情况下抛出异常
      在根节点（nlog）配置 internalLogLevel, internalLogFile，可以查看NLog输出日志时的内部信息，比如你配置文件有错误，很有帮助，不过项目发布后还是关闭比较好，以免影响效率；-->

	<targets>
		<!--target参数里有些是NLog内置参数，比如message,level,date,longdate,exception,stacktrace(消息，级别，日期，长日期，异常，堆栈跟踪)等，NLog在输出时会自动赋值；-->

		<!--xsi:type="AsyncWrapper" 表示这条 target 将异步输出-->
		<!--queueLimit="5000" 队列限制5000-->
		<!--overflowAction="Discard" 这个不知道干啥的(⊙_⊙)？猜测是上面队列超过5000之后的就丢弃-->
		<!--layout 设置每条日志的布局,可参考官方说明 https://nlog-project.org/config/?tab=layout-renderers -->

		<!--currentdir：应用程序的当前工作目录
        date：当前日期和时间
        shortdate：yyyy-MM-dd 格式的短日期
        processid：当前进程的标识符
        threadid：当前线程标识符
        level：日志级别
        message：(格式化的)日志消息。
        event-properties：记录事件属性数据(之前用event-context)
        stacktrace ：呈现堆栈跟踪(记录具体哪个方法名)
        archiveFileName:为了防止日志文件保存的太大，我们将日志文件拆分保存;设置为10240=10KB，每个日志大小达到10KB就会自动拆分文件
		archiveAboveSize:根据指定大小将日志拆文件保存
		concurrentWrites:支持多个并发一起写文件，提高文件写入性能
        **如果fileName起名字，不重复，则一直往这个文件中添加数据（比如 shortdate 时间作为文件名，只有超过了时间，才会新增一个文件）
        -->


		<!-- 1.将日志写入文件-->
		<target name="Hello_File"
				xsi:type="File"
				fileName="${currentdir}/logs/Hello_${shortdate}.log"
				archiveFileName="${currentdir}/logs/Hello_${shortdate}.{##}.log"
				archiveAboveSize="1024"
				concurrentWrites="true"
				layout="${date}_${processid}_${threadid} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}"  />

		<target name="Hi_File" xsi:type="File"
			    fileName="${currentdir}/logs/Hi_${shortdate}.log"
				layout="${date}_${processid}_${threadid} ${level:uppercase=true} ${event-properties:item=Action} ${message} ${event-properties:item=Amount} ${stacktrace}" />

		<!-- 2.将日志消息写入Visual Studio输出-->
		<target name="debugger" xsi:type="Debugger" layout="NLog: ${date:format=yyyy-MM-dd HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}" />

		<!-- 3.将日志消息写入控制台输出-->
		<target name="console" xsi:type="Console" layout="NLog: ${date:format=yyyy-MM-dd HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}"/>

		<target name="CoreLog"
				xsi:type="AsyncWrapper"
				queueLimit="5000"
				overflowAction="Discard">
			<target xsi:type="File"
					fileName="${currentdir}/logs/Hello_${shortdate}.log"
					archiveFileName="${currentdir}/logs/Hello_${shortdate}.{##}.log"
					archiveAboveSize="1024"
					concurrentWrites="true"
					layout="${date}_${processid}_${threadid} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}"  />
		</target>

		<target name="database" xsi:type="Database" connectionstring="Server=47.104.11.154;User ID=sa;Password=sa@2008;database=OeeIot;">
			<commandText>
				insert into NLogInfo([Date],[origin],[Level],[Message]) values (getdate(), @origin, @logLevel, @message);
			</commandText>
			日志来源
			<parameter name="@origin" layout="${callsite}" />
			日志等级
			<parameter name="@logLevel" layout="${level}" />
			日志消息
			<parameter name="@message" layout="${message}" />
		</target>

	</targets>
	<rules>
		<!--name:logger名称，若为*则表示适用于所有日志，若我们某个target专门用于logdemo.test类的日志输出，则那么可以设置为logdemo.test.*,表示当前约束只允许命名空间为logdemo.test开头的日志输出。
	  minlevel:表示当前约束的最小等级，只有等于或大于该值的日志等级才会被记录。
	  writeTo:表示当前规则约束哪个target-->

		<!--在rules节点，指定四个target输出日志的级别-->
		<!--TRACE,DEBUG,INFO,WARN,ERROR,FATAL /(小级别) 跟踪、调试、信息、警告、错误、致命 (大级别) -->
		<!--name - 日志源/记录者的名字 (允许使用通配符*) C#调用的时候 LogManager.GetLogger("这里就是name值")
        minlevel - 该规则所匹配日志范围的最小级别
        maxlevel - 该规则所匹配日志范围的最大级别
        level - 该规则所匹配的单一日志级别
        levels - 该规则所匹配的一系列日志级别，由逗号分隔。
        writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
        final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行。-->

		<logger name="Hello_Nlog" minlevel="Info" writeTo="Hello_File" />
		<logger name="Hi_Nlog" minlevel="Info" writeTo="Hi_File" />
		<logger name="*" minlevel="Info" writeTo="debugger,console" />
		<logger name="*" minlevel="Info" writeTo="CoreLog" />
		<logger name="*"  writeTo="database" />
	</rules>
</nlog>
